create database db_blog_posts;
use db_blog_posts;

-- TABEL USERS
CREATE TABLE users (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL);
    
-- TABEL CATEGORIES
CREATE TABLE categories (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL);
    
-- TABEL BLOG_POSTS
CREATE TABLE blog_posts (
    id INT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    body TEXT,
    author_id INT,
    CONSTRAINT fk_author FOREIGN KEY (author_id) REFERENCES users(id));

-- TABEL POST_CATEGORIES
CREATE TABLE post_categories (
    post_id INT,
    category_id INT,
    PRIMARY KEY (post_id, category_id),
    CONSTRAINT fk_post FOREIGN KEY (post_id) REFERENCES blog_posts(id),
    CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(id));
    
INSERT INTO users (id, name) VALUES
(1, 'John Doe'),
(2, 'Robert'),
(3, 'Frank'),
(4, 'Jane');

INSERT INTO categories (id, name) VALUES
(1, 'Basic'),
(2, 'Library'),
(3, 'Unknown'),
(4, 'Sport');

INSERT INTO blog_posts (id, title, body, author_id) VALUES
(1, 'Algorithm', 'this is article for algorithm', 1),
(2, 'Lorem Ipsum', 'lorem ipsum dolor sit amet', 1),
(3, 'NodeJS', 'Node.js is a JavaScript runtime built on Chrome''s V8 JavaScript engine.', 2),
(4, 'ReactJS', 'ReactJS is JavaScript library for building user interfaces', 4),
(5, 'Git', 'Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency', 3),
(6, 'Basketball', 'Basketball is a team sport in which two teams, most commonly of five players each, opposing one another on a rectangular court, compete with the primary objective of shooting a basketball (approximately 9.4 inches (24 cm) in diameter) through the defender''s hoop (a basket 18 inches (46 cm) in diameter mounted 10 feet (3.048 m) high to a backboard at each end of the court, while preventing the opposing team from shooting through their own hoop', 2);

INSERT INTO post_categories (post_id, category_id) VALUES
(1, 1),
(2, 3),
(3, 1),
(3, 2),
(4, 2),
(4, 1),
(5, 1),
(6, 4);

-- menampilkan data posts yang di tulis John Doe
-- menggunakan inner join
SELECT * FROM blog_posts JOIN
    users ON blog_posts.author_id = users.id WHERE
    users.name = 'John Doe';
    
    
-- QUERRY INI MENGGUNAKAN 4 TABEL SEKALIGUS,DENGAN MEMANFAATKAN ALIAS
SELECT c.name AS category_name,
       bp.title AS post_title,
       u.name AS author_name
FROM blog_posts bp 
INNER JOIN users u ON bp.author_id = u.id
INNER JOIN post_categories pc ON bp.id = pc.post_id
INNER JOIN categories c ON pc.category_id = c.id
WHERE c.name = 'Basic';

SELECT c.name AS "Category Name",
	   bp.title AS "Post Title",
       bp.body
FROM blog_posts bp
INNER JOIN users u ON bp.author_id = u.id
INNER JOIN post_categories pc ON bp.id = pc.post_id
INNER JOIN categories c ON pc.category_id = c.id
WHERE u.name IN ('Robert', 'Frank');

SELECT u.name AS "Author Name",
       c.name AS "Category Name"
FROM users u
INNER JOIN blog_posts bp ON u.id = bp.author_id
INNER JOIN post_categories pc ON bp.id = pc.post_id
INNER JOIN categories c ON pc.category_id = c.id
WHERE bp.id IN (
SELECT post_id FROM post_categories GROUP BY post_id HAVING COUNT(post_id) >= 2);

SELECT u.name AS "Author Name",
       bp.title AS "Post Title"
FROM users u
INNER JOIN blog_posts bp ON u.id = bp.author_id
WHERE bp.id IN (
SELECT post_id FROM post_categories GROUP BY post_id HAVING COUNT(post_id) = 1);